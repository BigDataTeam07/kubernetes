pipeline {
    agent any
    
    environment {
        ECR_REPOSITORY = "119002862962.dkr.ecr.ap-southeast-1.amazonaws.com/amazon-music-review/telegram-producer"
        AWS_REGION = "ap-southeast-1"
        DOCKER_IMAGE_TAG = "${ECR_REPOSITORY}:${env.BUILD_NUMBER}"
        DOCKER_IMAGE_LATEST = "${ECR_REPOSITORY}:latest"
        K8S_NAMESPACE = "telegram-bot-listener"
        K8S_DEPLOYMENT = "telegram-bot-listener-deployment"
    }
    
    stages {
        stage('Build Gradle Project') {
            steps {
                sh './gradlew clean shadowJar'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE_TAG} -t ${DOCKER_IMAGE_LATEST} .'
            }
        }
        
        stage('Push to ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                                  credentialsId: 'aws-credentials', 
                                  accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh '''
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY%/*}
                        docker push ${DOCKER_IMAGE_TAG}
                        docker push ${DOCKER_IMAGE_LATEST}
                    '''
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                                  credentialsId: 'aws-credentials', 
                                  accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh '''
                        aws eks update-kubeconfig --region ${AWS_REGION} --name amazon-music-review-cluster
                        kubectl -n ${K8S_NAMESPACE} set image deployment/${K8S_DEPLOYMENT} ${K8S_DEPLOYMENT}=${DOCKER_IMAGE_TAG}
                        kubectl -n ${K8S_NAMESPACE} rollout status deployment/${K8S_DEPLOYMENT}
                    '''
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker rmi ${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_LATEST} || true'
            cleanWs()
        }
    }
}
